// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc_stock

import (
	"context"
)

const getStocksBySku = `-- name: GetStocksBySku :one
SELECT total_count - reserved AS count
FROM stock
WHERE sku = $1
LIMIT 1
`

func (q *Queries) GetStocksBySku(ctx context.Context, sku int64) (int32, error) {
	row := q.db.QueryRow(ctx, getStocksBySku, sku)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const reserve = `-- name: Reserve :exec
UPDATE stock
SET reserved = reserved + $2
WHERE sku = $1
`

type ReserveParams struct {
	Sku   int64
	Count int32
}

func (q *Queries) Reserve(ctx context.Context, arg ReserveParams) error {
	_, err := q.db.Exec(ctx, reserve, arg.Sku, arg.Count)
	return err
}

const reserveCancel = `-- name: ReserveCancel :exec
UPDATE stock
SET reserved = reserved - $2
WHERE sku = $1
`

type ReserveCancelParams struct {
	Sku   int64
	Count int32
}

func (q *Queries) ReserveCancel(ctx context.Context, arg ReserveCancelParams) error {
	_, err := q.db.Exec(ctx, reserveCancel, arg.Sku, arg.Count)
	return err
}

const reserveRemove = `-- name: ReserveRemove :exec
UPDATE stock
SET
    total_count = total_count - $2,
    reserved = reserved - $2
WHERE sku = $1
`

type ReserveRemoveParams struct {
	Sku   int64
	Count int32
}

func (q *Queries) ReserveRemove(ctx context.Context, arg ReserveRemoveParams) error {
	_, err := q.db.Exec(ctx, reserveRemove, arg.Sku, arg.Count)
	return err
}
