// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc_order

import (
	"context"
)

const addItem = `-- name: AddItem :exec
INSERT INTO order_items
    (order_id, sku, count)
VALUES
    ($1, $2, $3)
`

type AddItemParams struct {
	OrderID int64
	Sku     int64
	Count   int32
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) error {
	_, err := q.db.Exec(ctx, addItem, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const create = `-- name: Create :one
INSERT INTO orders
    (user_id, status)
VALUES
    ($1, $2)
RETURNING id
`

type CreateParams struct {
	UserID int64
	Status string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (int64, error) {
	row := q.db.QueryRow(ctx, create, arg.UserID, arg.Status)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getById = `-- name: GetById :many
SELECT orders.id, orders.user_id, orders.status, orders.created_at, orders.updated_at, order_items.order_id, order_items.sku, order_items.count, order_items.created_at, order_items.updated_at
FROM orders
LEFT JOIN order_items ON orders.id = order_items.order_id
WHERE id = $1
`

type GetByIdRow struct {
	Order     Order
	OrderItem OrderItem
}

func (q *Queries) GetById(ctx context.Context, id int64) ([]GetByIdRow, error) {
	rows, err := q.db.Query(ctx, getById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetByIdRow
	for rows.Next() {
		var i GetByIdRow
		if err := rows.Scan(
			&i.Order.ID,
			&i.Order.UserID,
			&i.Order.Status,
			&i.Order.CreatedAt,
			&i.Order.UpdatedAt,
			&i.OrderItem.OrderID,
			&i.OrderItem.Sku,
			&i.OrderItem.Count,
			&i.OrderItem.CreatedAt,
			&i.OrderItem.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStatus = `-- name: SetStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
`

type SetStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) SetStatus(ctx context.Context, arg SetStatusParams) error {
	_, err := q.db.Exec(ctx, setStatus, arg.ID, arg.Status)
	return err
}
