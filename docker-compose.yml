version: "3.8"

x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  networks:
    - cart_network
  healthcheck:
    test: ["CMD-SHELL", "pg_isready", "-U", "user", "--dbname=postgres"]
    interval: 10s
    timeout: 5s
    retries: 5

services:
  cart:
    container_name: cart
    image: cart
    build:
      context: ./cart
      dockerfile: ./Dockerfile
    ports:
      - "8082:8082" # HTTP
    networks:
      - cart_network
    environment:
      SERVICE_NAME: 'cart'
      CART_SERVICE_URL: ':8082'
      LOMS_SERVICE_URL: 'loms:50777'
      TRACER_URL: 'jaeger:4318'

  loms:
    container_name: loms
    image: loms
    build:
      context: ./loms
      dockerfile: ./Dockerfile
    ports:
      - "50777:50777" # gRPC
      - "8097:8097" # HTTP
    networks:
      - cart_network
    environment:
      GRPC_URL: ':50777'
      HTTP_URL: ':8097'
      SERVICE_NAME: 'loms'
      DATABASE_MASTER_URL: 'postgres://user:password@db_master:5432/postgres'
      DATABASE_REPLICA_URL: 'postgres://user:password@db_replica:5432/postgres'
      TRACER_URL: 'jaeger:4318'
      KAFKA_BROKERS: 'kafka0:9092'
      KAFKA_ORDER_EVENTS_TOPIC: 'loms.order-events'
    depends_on:
      db_master:
        condition: service_healthy
      db_replica:
        condition: service_healthy
      kafka0:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully

  db_master:
    <<: *postgres-common
    container_name: db_master
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./replication_init.sql:/docker-entrypoint-initdb.d/replication_init.sql

  db_replica:
    <<: *postgres-common
    container_name: db_replica
    ports:
      - 5433:5432
    environment:
      PGUSER: repl
      PGPASSWORD: password
      PGDATABASE: postgres
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db_master --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres -c hot_standby=on
      "
    depends_on:
      - db_master

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.53.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      # - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - cart_network

  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.20
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      # - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - cart_network

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.58
    ports:
      - "16686:16686"
      - "4318:4318"
    networks:
      - cart_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 8085:8080
    networks:
      - cart_network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka0:
    container_name: kafka0
    image: confluentinc/cp-kafka:7.6.2
    ports:
      - 9092:9092
    networks:
      - cart_network
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://kafka0:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: nc -z kafka0 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-init-topics:
    container_name: kafka-init-topics
    image: confluentinc/cp-kafka:7.6.2
    depends_on:
      kafka0:
        condition: service_healthy
    networks:
      - cart_network
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

  notifier-1:
    container_name: notifier-1
    image: notifier-image
    build:
      context: ./notifier 
      dockerfile: ./Dockerfile
    environment:
      KAFKA_BROKERS: 'kafka0:9092'
      KAFKA_CONSUMER_GROUP_NAME: 'notifier'
      KAFKA_ORDER_EVENTS_TOPIC: 'loms.order-events'
    networks:
      - cart_network
    depends_on:
      kafka0:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully

  notifier-2:
    container_name: notifier-2
    image: notifier-image
    environment:
      KAFKA_BROKERS: 'kafka0:9092'
      KAFKA_CONSUMER_GROUP_NAME: 'notifier'
      KAFKA_ORDER_EVENTS_TOPIC: 'loms.order-events'
    networks:
      - cart_network
    depends_on:
      - notifier-1

  notifier-3:
    container_name: notifier-3
    image: notifier-image
    environment:
      KAFKA_BROKERS: 'kafka0:9092'
      KAFKA_CONSUMER_GROUP_NAME: 'notifier'
      KAFKA_ORDER_EVENTS_TOPIC: 'loms.order-events'
    networks:
      - cart_network
    depends_on:
      - notifier-1

# volumes:
#   prometheus_data: {}
#   grafana_data: {}

networks:
  cart_network:
